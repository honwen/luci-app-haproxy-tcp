#!/bin/sh /etc/rc.common

START=85
NAME=haproxy-tcp
USE_PROCD=1

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_type() {
	case "$(uci_get_by_type $1 $2)" in
	1 | on | true | yes | enabled) return 0 ;;
	esac
	return 1
}

start_instance() {
	procd_open_instance
	procd_set_param respawn
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param term_timeout 3
	procd_set_param nice -5
	procd_set_param limits nofile="65535 65535"
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_append_param limits core="unlimited"
	}
	procd_set_param command $@
	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger $NAME
}

genline_srv() {
	line="$1"
	hash="$(echo -n $line | md5sum | cut -c1-6)"
	hash="$(echo -n $line | tr -d '\t ' | cut -c1-8)__$hash"
	echo "    server $hash  $line" | tr -d "\'"
}

boot() {
	local delay=$(uci_get_by_type $NAME startup_delay)
	(sleep ${delay:-0} && start >/dev/null 2>&1) &
	return 0
}

start_service() {
	uci_bool_by_type $NAME enable || exit 0
	local listen=$(uci_get_by_type $NAME listen)
	local admin_stats=$(uci_get_by_type $NAME admin_stats)
	local retries=$(uci_get_by_type $NAME retries)
	local timeout=$(uci_get_by_type $NAME timeout)
	local upstreams=$(uci_get_by_type $NAME upstreams)

	mkdir -p /var/etc
	cat <<-EOF >/var/etc/$NAME.cfg
		defaults
		    mode tcp
		    retries ${retries:-2}
		    timeout connect ${timeout:-1000}
		    timeout client ${timeout:-1000}
		    timeout server ${timeout:-1000}

		listen admin_stats
		    bind 0.0.0.0:${admin_stats:-7777}
		    mode http
		    stats uri /
		    stats refresh 10s

		frontend tcp-in
		    bind ${listen:-0.0.0.0:6666}
		    default_backend tcp-out

		backend tcp-out
			$(
			if [ 0 -lt $(grep -c weight /etc/config/$NAME) ]; then
				echo "    balance static-rr"
				sed -n 's/.*upstreams[\t ]*//p' /etc/config/$NAME |
					while read upstream; do
						genline_srv "$upstream"
					done
			else
				for upstream in $upstreams; do
					genline_srv "$upstream"
				done
			fi
		)

	EOF

	start_instance /usr/sbin/$NAME -q -f /var/etc/$NAME.cfg -p /var/run/$NAME.pid
}

kill_all() {
	kill -9 $(pgrep -f $@) >/dev/null 2>&1
}

stop_service() {
	kill_all "$NAME.pid"
	rm -rf /var/etc/$NAME.cfg
}
